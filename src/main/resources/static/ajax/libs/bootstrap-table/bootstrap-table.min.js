(function (g) {
    var h = null;
    var k = function (s) {
        var u = arguments, t = true, r = 1;
        s = s.replace(/%s/g, function () {
            var v = u[r++];
            if (typeof v === "undefined") {
                t = false;
                return ""
            }
            return v
        });
        return t ? s : ""
    };
    var o = function (v, s, r, u) {
        var t = "";
        g.each(v, function (w, x) {
            if (x[s] === u) {
                t = x[r];
                return false
            }
            return true
        });
        return t
    };
    var f = function (r, s) {
        var t = -1;
        g.each(r, function (u, v) {
            if (v.field === s) {
                t = u;
                return false
            }
            return true
        });
        return t
    };
    var i = function (t) {
        var x, w, v, z = 0, A = [];
        for (x = 0; x < t[0].length; x++) {
            z += t[0][x].colspan || 1
        }
        for (x = 0; x < t.length; x++) {
            A[x] = [];
            for (w = 0; w < z; w++) {
                A[x][w] = false
            }
        }
        for (x = 0; x < t.length; x++) {
            for (w = 0; w < t[x].length; w++) {
                var r = t[x][w], u = r.rowspan || 1, s = r.colspan || 1, y = g.inArray(false, A[x]);
                if (s === 1) {
                    r.fieldIndex = y;
                    if (typeof r.field === "undefined") {
                        r.field = y
                    }
                }
                for (v = 0; v < u; v++) {
                    A[x + v][y] = true
                }
                for (v = 0; v < s; v++) {
                    A[x][y + v] = true
                }
            }
        }
    };
    var j = function () {
        if (h === null) {
            var r = g("<p/>").addClass("fixed-table-scroll-inner"),
                s = g("<div/>").addClass("fixed-table-scroll-outer"), u, t;
            s.append(r);
            g("body").append(s);
            u = r[0].offsetWidth;
            s.css("overflow", "scroll");
            t = r[0].offsetWidth;
            if (u === t) {
                t = s[0].clientWidth
            }
            s.remove();
            h = u - t
        }
        return h
    };
    var b = function (u, w, v, t) {
        var r = w;
        if (typeof w === "string") {
            var s = w.split(".");
            if (s.length > 1) {
                r = window;
                g.each(s, function (y, x) {
                    r = r[x]
                })
            } else {
                r = window[w]
            }
        }
        if (typeof r === "object") {
            return r
        }
        if (typeof r === "function") {
            return r.apply(u, v)
        }
        if (!r && typeof w === "string" && k.apply(this, [w].concat(v))) {
            return k.apply(this, [w].concat(v))
        }
        return t
    };
    var c = function (u, t, r) {
        var s = Object.getOwnPropertyNames(u), w = Object.getOwnPropertyNames(t), x = "";
        if (r) {
            if (s.length !== w.length) {
                return false
            }
        }
        for (var v = 0; v < s.length; v++) {
            x = s[v];
            if (g.inArray(x, w) > -1) {
                if (u[x] !== t[x]) {
                    return false
                }
            }
        }
        return true
    };
    var q = function (r) {
        if (typeof r === "string") {
            return r.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;").replace(/`/g, "&#x60;")
        }
        return r
    };
    var p = function (s) {
        var r = 0;
        s.children().each(function () {
            if (r < g(this).outerHeight(true)) {
                r = g(this).outerHeight(true)
            }
        });
        return r
    };
    var d = function (s) {
        for (var t in s) {
            var r = t.split(/(?=[A-Z])/).join("-").toLowerCase();
            if (r !== t) {
                s[r] = s[t];
                delete s[t]
            }
        }
        return s
    };
    var n = function (v, s, u) {
        var w = v;
        if (typeof s !== "string" || v.hasOwnProperty(s)) {
            return u ? q(v[s]) : v[s]
        }
        var t = s.split(".");
        for (var r in t) {
            w = w && w[t[r]]
        }
        return u ? q(w) : w
    };
    var m = function () {
        return !!(navigator.userAgent.indexOf("MSIE ") > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./))
    };
    var e = function () {
        if (!Object.keys) {
            Object.keys = (function () {
                var r = Object.prototype.hasOwnProperty, s = !({toString: null}).propertyIsEnumerable("toString"),
                    u = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"],
                    t = u.length;
                return function (y) {
                    if (typeof y !== "object" && (typeof y !== "function" || y === null)) {
                        throw new TypeError("Object.keys called on non-object")
                    }
                    var w = [], v, x;
                    for (v in y) {
                        if (r.call(y, v)) {
                            w.push(v)
                        }
                    }
                    if (s) {
                        for (x = 0; x < t; x++) {
                            if (r.call(y, u[x])) {
                                w.push(u[x])
                            }
                        }
                    }
                    return w
                }
            }())
        }
    };
    var a = function (s, r) {
        this.options = r;
        this.$el = g(s);
        this.$el_ = this.$el.clone();
        this.timeoutId_ = 0;
        this.timeoutFooter_ = 0;
        this.init()
    };
    a.DEFAULTS = {
        classes: "table table-hover",
        locale: undefined,
        height: undefined,
        undefinedText: "-",
        sortName: undefined,
        sortOrder: "asc",
        sortStable: false,
        striped: false,
        columns: [[]],
        data: [],
        dataField: "rows",
        method: "get",
        url: undefined,
        ajax: undefined,
        cache: true,
        contentType: "application/json",
        dataType: "json",
        ajaxOptions: {},
        queryParams: function (r) {
            return r
        },
        queryParamsType: "limit",
        responseHandler: function (r) {
            return r
        },
        pagination: false,
        onlyInfoPagination: false,
        sidePagination: "client",
        totalRows: 0,
        pageNumber: 1,
        pageSize: 10,
        pageList: [10, 25, 50, 100],
        paginationHAlign: "right",
        paginationVAlign: "bottom",
        paginationDetailHAlign: "left",
        paginationPreText: "&lsaquo;",
        paginationNextText: "&rsaquo;",
        search: false,
        searchOnEnterKey: false,
        strictSearch: false,
        searchAlign: "right",
        selectItemName: "btSelectItem",
        showHeader: true,
        showFooter: false,
        showColumns: false,
        showSearch: false,
        showPaginationSwitch: false,
        showRefresh: false,
        showToggle: false,
        buttonsAlign: "right",
        smartDisplay: true,
        escape: false,
        minimumCountColumns: 1,
        idField: undefined,
        uniqueId: undefined,
        cardView: false,
        detailView: false,
        detailFormatter: function (r, s) {
            return ""
        },
        trimOnSearch: true,
        clickToSelect: false,
        singleSelect: false,
        toolbar: undefined,
        toolbarAlign: "left",
        checkboxHeader: true,
        sortable: true,
        silentSort: true,
        maintainSelected: false,
        searchTimeOut: 500,
        searchText: "",
        iconSize: undefined,
        buttonsClass: "default",
        iconsPrefix: "glyphicon",
        icons: {
            search: "glyphicon-search",
            paginationSwitchDown: "glyphicon-collapse-down icon-chevron-down",
            paginationSwitchUp: "glyphicon-collapse-up icon-chevron-up",
            refresh: "glyphicon-refresh icon-refresh",
            toggle: "glyphicon-list-alt icon-list-alt",
            columns: "glyphicon-th icon-th",
            detailOpen: "glyphicon-plus icon-plus",
            detailClose: "glyphicon-minus icon-minus"
        },
        customSearch: g.noop,
        customSort: g.noop,
        rowStyle: function (s, r) {
            return {}
        },
        rowAttributes: function (s, r) {
            return {}
        },
        footerStyle: function (s, r) {
            return {}
        },
        onAll: function (s, r) {
            return false
        },
        onClickCell: function (r, u, s, t) {
            return false
        },
        onDblClickCell: function (r, u, s, t) {
            return false
        },
        onClickRow: function (s, r) {
            return false
        },
        onDblClickRow: function (s, r) {
            return false
        },
        onSort: function (s, r) {
            return false
        },
        onCheck: function (r) {
            return false
        },
        onUncheck: function (r) {
            return false
        },
        onCheckAll: function (r) {
            return false
        },
        onUncheckAll: function (r) {
            return false
        },
        onCheckSome: function (r) {
            return false
        },
        onUncheckSome: function (r) {
            return false
        },
        onLoadSuccess: function (r) {
            return false
        },
        onLoadError: function (r) {
            return false
        },
        onColumnSwitch: function (s, r) {
            return false
        },
        onPageChange: function (s, r) {
            return false
        },
        onSearch: function (r) {
            return false
        },
        onShowSearch: function () {
            return false
        },
        onToggle: function (r) {
            return false
        },
        onPreBody: function (r) {
            return false
        },
        onPostBody: function () {
            return false
        },
        onPostHeader: function () {
            return false
        },
        onExpandRow: function (t, s, r) {
            return false
        },
        onCollapseRow: function (r, s) {
            return false
        },
        onRefreshOptions: function (r) {
            return false
        },
        onRefresh: function (r) {
            return false
        },
        onResetView: function () {
            return false
        }
    };
    a.LOCALES = {};
    a.LOCALES["en-US"] = a.LOCALES.en = {
        formatLoadingMessage: function () {
            return "Loading, please wait..."
        }, formatRecordsPerPage: function (r) {
            return k("%s rows per page", r)
        }, formatShowingRows: function (s, t, r) {
            return k("Showing %s to %s of %s rows", s, t, r)
        }, formatDetailPagination: function (r) {
            return k("Showing %s rows", r)
        }, formatSearch: function () {
            return "Search"
        }, formatNoMatches: function () {
            return "No matching records found"
        }, formatPaginationSwitch: function () {
            return "Hide/Show pagination"
        }, formatRefresh: function () {
            return "Refresh"
        }, formatToggle: function () {
            return "Toggle"
        }, formatColumns: function () {
            return "Columns"
        }, formatAllRows: function () {
            return "All"
        }
    };
    g.extend(a.DEFAULTS, a.LOCALES["en-US"]);
    a.COLUMN_DEFAULTS = {
        radio: false,
        checkbox: false,
        checkboxEnabled: true,
        field: undefined,
        title: undefined,
        titleTooltip: undefined,
        "class": undefined,
        align: undefined,
        halign: undefined,
        falign: undefined,
        valign: undefined,
        width: undefined,
        sortable: false,
        order: "asc",
        visible: true,
        switchable: true,
        clickToSelect: true,
        formatter: undefined,
        footerFormatter: undefined,
        events: undefined,
        sorter: undefined,
        sortName: undefined,
        cellStyle: undefined,
        searchable: true,
        searchFormatter: true,
        cardVisible: true
    };
    a.EVENTS = {
        "all.bs.table": "onAll",
        "click-cell.bs.table": "onClickCell",
        "dbl-click-cell.bs.table": "onDblClickCell",
        "click-row.bs.table": "onClickRow",
        "dbl-click-row.bs.table": "onDblClickRow",
        "sort.bs.table": "onSort",
        "check.bs.table": "onCheck",
        "uncheck.bs.table": "onUncheck",
        "check-all.bs.table": "onCheckAll",
        "uncheck-all.bs.table": "onUncheckAll",
        "check-some.bs.table": "onCheckSome",
        "uncheck-some.bs.table": "onUncheckSome",
        "load-success.bs.table": "onLoadSuccess",
        "load-error.bs.table": "onLoadError",
        "column-switch.bs.table": "onColumnSwitch",
        "page-change.bs.table": "onPageChange",
        "search.bs.table": "onSearch",
        "toggle.bs.table": "onToggle",
        "show-search.bs.table": "onShowSearch",
        "pre-body.bs.table": "onPreBody",
        "post-body.bs.table": "onPostBody",
        "post-header.bs.table": "onPostHeader",
        "expand-row.bs.table": "onExpandRow",
        "collapse-row.bs.table": "onCollapseRow",
        "refresh-options.bs.table": "onRefreshOptions",
        "reset-view.bs.table": "onResetView",
        "refresh.bs.table": "onRefresh"
    };
    a.prototype.init = function () {
        this.initLocale();
        this.initContainer();
        this.initTable();
        this.initHeader();
        this.initData();
        this.initFooter();
        this.initToolbar();
        this.initPagination();
        this.initBody();
        this.initSearchText();
        this.initServer()
    };
    a.prototype.initLocale = function () {
        if (this.options.locale) {
            var r = this.options.locale.split(/-|_/);
            r[0].toLowerCase();
            if (r[1]) {
                r[1].toUpperCase()
            }
            if (g.fn.bootstrapTable.locales[this.options.locale]) {
                g.extend(this.options, g.fn.bootstrapTable.locales[this.options.locale])
            } else {
                if (g.fn.bootstrapTable.locales[r.join("-")]) {
                    g.extend(this.options, g.fn.bootstrapTable.locales[r.join("-")])
                } else {
                    if (g.fn.bootstrapTable.locales[r[0]]) {
                        g.extend(this.options, g.fn.bootstrapTable.locales[r[0]])
                    }
                }
            }
        }
    };
    a.prototype.initContainer = function () {
        this.$container = g(['<div class="bootstrap-table">', '<div class="fixed-table-toolbar"></div>', this.options.paginationVAlign === "top" || this.options.paginationVAlign === "both" ? '<div class="fixed-table-pagination" style="clear: both;"></div>' : "", '<div class="fixed-table-container">', '<div class="fixed-table-header"><table></table></div>', '<div class="fixed-table-body">', '<div class="fixed-table-loading">', this.options.formatLoadingMessage(), "</div>", "</div>", '<div class="fixed-table-footer"><table><tr></tr></table></div>', this.options.paginationVAlign === "bottom" || this.options.paginationVAlign === "both" ? '<div class="fixed-table-pagination"></div>' : "", "</div>", "</div>"].join(""));
        this.$container.insertAfter(this.$el);
        this.$tableContainer = this.$container.find(".fixed-table-container");
        this.$tableHeader = this.$container.find(".fixed-table-header");
        this.$tableBody = this.$container.find(".fixed-table-body");
        this.$tableLoading = this.$container.find(".fixed-table-loading");
        this.$tableFooter = this.$container.find(".fixed-table-footer");
        this.$toolbar = this.$container.find(".fixed-table-toolbar");
        this.$pagination = this.$container.find(".fixed-table-pagination");
        this.$tableBody.append(this.$el);
        this.$container.after('<div class="clearfix"></div>');
        this.$el.addClass(this.options.classes);
        if (this.options.striped) {
            this.$el.addClass("table-striped")
        }
        if (g.inArray("table-no-bordered", this.options.classes.split(" ")) !== -1) {
            this.$tableContainer.addClass("table-no-bordered")
        }
    };
    a.prototype.initTable = function () {
        var r = this, w = [], t = [];
        this.$header = this.$el.find(">thead");
        if (!this.$header.length) {
            this.$header = g("<thead></thead>").appendTo(this.$el)
        }
        this.$header.find("tr").each(function () {
            var x = [];
            g(this).find("th").each(function () {
                if (typeof g(this).data("field") !== "undefined") {
                    g(this).data("field", g(this).data("field") + "")
                }
                x.push(g.extend({}, {
                    title: g(this).html(),
                    "class": g(this).attr("class"),
                    titleTooltip: g(this).attr("title"),
                    rowspan: g(this).attr("rowspan") ? +g(this).attr("rowspan") : undefined,
                    colspan: g(this).attr("colspan") ? +g(this).attr("colspan") : undefined
                }, g(this).data()))
            });
            w.push(x)
        });
        if (!g.isArray(this.options.columns[0])) {
            this.options.columns = [this.options.columns]
        }
        this.options.columns = g.extend(true, [], w, this.options.columns);
        var u = {
            field: 'orderNumber', title: "序号", width: 32, formatter: function (y, x, z) {
                return y == true ? '' : z + 1;
            }
        };
        var s = true;
        g.each(this.options.columns[0], function (y, x) {
            if (x.title === "序号") {
                s = false;
                return s
            }
        });
        if (s) {
            if (this.options.columns[0][0].checkbox == true) {
                this.options.columns[0].splice(1, 0, u)
            } else {
                this.options.columns[0].unshift(u)
            }
        }
        this.columns = [];
        i(this.options.columns);
        g.each(this.options.columns, function (y, x) {
            g.each(x, function (A, z) {
                z = g.extend({}, a.COLUMN_DEFAULTS, z);
                if (typeof z.fieldIndex !== "undefined") {
                    r.columns[z.fieldIndex] = z
                }
                r.options.columns[y][A] = z
            })
        });
        if (this.options.data.length) {
            return
        }
        var v = [];
        this.$el.find(">tbody>tr").each(function (y) {
            var x = {};
            x._id = g(this).attr("id");
            x._class = g(this).attr("class");
            x._data = d(g(this).data());
            g(this).find(">td").each(function (A) {
                var D = g(this), F = +D.attr("colspan") || 1, B = +D.attr("rowspan") || 1, E, z;
                for (; v[y] && v[y][A]; A++) {
                }
                for (E = A; E < A + F; E++) {
                    for (z = y; z < y + B; z++) {
                        if (!v[z]) {
                            v[z] = []
                        }
                        v[z][E] = true
                    }
                }
                var C = r.columns[A].field;
                x[C] = g(this).html();
                x["_" + C + "_id"] = g(this).attr("id");
                x["_" + C + "_class"] = g(this).attr("class");
                x["_" + C + "_rowspan"] = g(this).attr("rowspan");
                x["_" + C + "_colspan"] = g(this).attr("colspan");
                x["_" + C + "_title"] = g(this).attr("title");
                x["_" + C + "_data"] = d(g(this).data())
            });
            t.push(x)
        });
        this.options.data = t;
        if (t.length) {
            this.fromHtml = true
        }
    };
    a.prototype.initHeader = function () {
        var s = this, t = {}, r = [];
        this.header = {
            fields: [],
            styles: [],
            classes: [],
            formatters: [],
            events: [],
            sorters: [],
            sortNames: [],
            cellStyles: [],
            searchables: []
        };
        g.each(this.options.columns, function (v, u) {
            r.push("<tr>");
            if (v === 0 && !s.options.cardView && s.options.detailView) {
                r.push(k('<th class="detail" rowspan="%s"><div class="fht-cell"></div></th>', s.options.columns.length))
            }
            g.each(u, function (D, C) {
                var x = "", E = "", w = "", y = "", F = k(' class="%s"', C["class"]),
                    B = s.options.sortOrder || C.order, A = "px", z = C.width;
                if (C.width !== undefined && (!s.options.cardView)) {
                    if (typeof C.width === "string") {
                        if (C.width.indexOf("%") !== -1) {
                            A = "%"
                        }
                    }
                }
                if (C.width && typeof C.width === "string") {
                    z = C.width.replace("%", "").replace("px", "")
                }
                E = k("text-align: %s; ", C.halign ? C.halign : C.align);
                w = k("text-align: %s; ", C.align);
                y = k("vertical-align: %s; ", C.valign);
                y += k("width: %s; ", (C.checkbox || C.radio) && !z ? "36px" : (z ? z + A : undefined));
                if (typeof C.fieldIndex !== "undefined") {
                    s.header.fields[C.fieldIndex] = C.field;
                    s.header.styles[C.fieldIndex] = w + y;
                    s.header.classes[C.fieldIndex] = F;
                    s.header.formatters[C.fieldIndex] = C.formatter;
                    s.header.events[C.fieldIndex] = C.events;
                    s.header.sorters[C.fieldIndex] = C.sorter;
                    s.header.sortNames[C.fieldIndex] = C.sortName;
                    s.header.cellStyles[C.fieldIndex] = C.cellStyle;
                    s.header.searchables[C.fieldIndex] = C.searchable;
                    if (!C.visible) {
                        return
                    }
                    if (s.options.cardView && (!C.cardVisible)) {
                        return
                    }
                    t[C.field] = C
                }
                r.push("<th" + k(' title="%s"', C.titleTooltip), C.checkbox || C.radio ? k(' class="bs-checkbox %s"', C["class"] || "") : F, k(' style="%s"', E + y), k(' rowspan="%s"', C.rowspan), k(' colspan="%s"', C.colspan), k(' data-field="%s"', C.field), "tabindex='0'", ">");
                r.push(k('<div class="th-inner %s">', s.options.sortable && C.sortable ? "sortable both" : ""));
                x = C.title;
                if (C.checkbox) {
                    if (!s.options.singleSelect && s.options.checkboxHeader) {
                        x = '<input name="btSelectAll" type="checkbox" />'
                    }
                    s.header.stateField = C.field
                }
                if (C.radio) {
                    x = "";
                    s.header.stateField = C.field;
                    s.options.singleSelect = true
                }
                r.push(x);
                r.push("</div>");
                r.push('<div class="fht-cell"></div>');
                r.push("</div>");
                r.push("</th>")
            });
            r.push("</tr>")
        });
        this.$header.html(r.join(""));
        this.$header.find("th[data-field]").each(function (u) {
            g(this).data(t[g(this).data("field")])
        });
        this.$container.off("click", ".th-inner").on("click", ".th-inner", function (u) {
            var v = g(this);
            if (s.options.detailView) {
                if (v.closest(".bootstrap-table")[0] !== s.$container[0]) {
                    return false
                }
            }
            if (s.options.sortable && v.parent().data().sortable) {
                s.onSort(u)
            }
        });
        this.$header.children().children().off("keypress").on("keypress", function (v) {
            if (s.options.sortable && g(this).data().sortable) {
                var u = v.keyCode || v.which;
                if (u == 13) {
                    s.onSort(v)
                }
            }
        });
        g(window).off("resize.bootstrap-table");
        if (!this.options.showHeader || this.options.cardView) {
            this.$header.hide();
            this.$tableHeader.hide();
            this.$tableLoading.css("top", 0)
        } else {
            this.$header.show();
            this.$tableHeader.show();
            this.$tableLoading.css("top", this.$header.outerHeight() + 1);
            this.getCaret();
            g(window).on("resize.bootstrap-table", g.proxy(this.resetWidth, this))
        }
        this.$selectAll = this.$header.find('[name="btSelectAll"]');
        this.$selectAll.off("click").on("click", function () {
            var u = g(this).prop("checked");
            s[u ? "checkAll" : "uncheckAll"]();
            s.updateSelected()
        })
    };
    a.prototype.initFooter = function () {
        if (!this.options.showFooter || this.options.cardView) {
            this.$tableFooter.hide()
        } else {
            this.$tableFooter.show()
        }
    };
    a.prototype.initData = function (s, r) {
        if (r === "append") {
            this.data = this.data.concat(s)
        } else {
            if (r === "prepend") {
                this.data = [].concat(s).concat(this.data)
            } else {
                this.data = s || this.options.data
            }
        }
        if (r === "append") {
            this.options.data = this.options.data.concat(s)
        } else {
            if (r === "prepend") {
                this.options.data = [].concat(s).concat(this.options.data)
            } else {
                this.options.data = this.data
            }
        }
        if (this.options.sidePagination === "server") {
            return
        }
        this.initSort()
    };
    a.prototype.initSort = function () {
        var s = this, r = this.options.sortName, t = this.options.sortOrder === "desc" ? -1 : 1,
            u = g.inArray(this.options.sortName, this.header.fields);
        if (this.options.customSort !== g.noop) {
            this.options.customSort.apply(this, [this.options.sortName, this.options.sortOrder]);
            return
        }
        if (u !== -1) {
            if (this.options.sortStable) {
                g.each(this.data, function (v, w) {
                    if (!w.hasOwnProperty("_position")) {
                        w._position = v
                    }
                })
            }
            this.data.sort(function (y, x) {
                if (s.header.sortNames[u]) {
                    r = s.header.sortNames[u]
                }
                var v = n(y, r, s.options.escape), w = n(x, r, s.options.escape),
                    z = b(s.header, s.header.sorters[u], [v, w]);
                if (z !== undefined) {
                    return t * z
                }
                if (v === undefined || v === null) {
                    v = ""
                }
                if (w === undefined || w === null) {
                    w = ""
                }
                if (s.options.sortStable && v === w) {
                    v = y._position;
                    w = x._position
                }
                if (g.isNumeric(v) && g.isNumeric(w)) {
                    v = parseFloat(v);
                    w = parseFloat(w);
                    if (v < w) {
                        return t * -1
                    }
                    return t
                }
                if (v === w) {
                    return 0
                }
                if (typeof v !== "string") {
                    v = v.toString()
                }
                if (v.localeCompare(w) === -1) {
                    return t * -1
                }
                return t
            })
        }
    };
    a.prototype.onSort = function (t) {
        var s = t.type === "keypress" ? g(t.currentTarget) : g(t.currentTarget).parent(),
            r = this.$header.find("th").eq(s.index());
        this.$header.add(this.$header_).find("span.order").remove();
        if (this.options.sortName === s.data("field")) {
            this.options.sortOrder = this.options.sortOrder === "asc" ? "desc" : "asc"
        } else {
            this.options.sortName = s.data("field");
            this.options.sortOrder = s.data("order") === "asc" ? "desc" : "asc"
        }
        this.trigger("sort", this.options.sortName, this.options.sortOrder);
        s.add(r).data("order", this.options.sortOrder);
        this.getCaret();
        if (this.options.sidePagination === "server") {
            this.initServer(this.options.silentSort);
            return
        }
        this.initSort();
        this.initBody()
    };
    a.prototype.initToolbar = function () {
        var w = this, v = [], s = 0, u, r, t = 0;
        if (this.$toolbar.find(".bs-bars").children().length) {
            g("body").append(g(this.options.toolbar))
        }
        this.$toolbar.html("");
        if (typeof this.options.toolbar === "string" || typeof this.options.toolbar === "object") {
            g(k('<div class="bs-bars pull-%s"></div>', this.options.toolbarAlign)).appendTo(this.$toolbar).append(g(this.options.toolbar))
        }
        v = [k('<div class="columns columns-%s btn-group pull-%s">', this.options.buttonsAlign, this.options.buttonsAlign)];
        if (typeof this.options.icons === "string") {
            this.options.icons = b(null, this.options.icons)
        }
        if (this.options.showSearch) {
            v.push(k('<button class="btn' + k(" btn-%s", this.options.buttonsClass) + k(" btn-%s", this.options.iconSize) + '" type="button" name="showSearch" title="%s">', this.options.formatSearch()), k('<i class="%s %s"></i>', this.options.iconsPrefix, this.options.icons.search), "</button>")
        }
        if (this.options.showPaginationSwitch) {
            v.push(k('<button class="btn' + k(" btn-%s", this.options.buttonsClass) + k(" btn-%s", this.options.iconSize) + '" type="button" name="paginationSwitch" title="%s">', this.options.formatPaginationSwitch()), k('<i class="%s %s"></i>', this.options.iconsPrefix, this.options.icons.paginationSwitchDown), "</button>")
        }
        if (this.options.showRefresh) {
            v.push(k('<button class="btn' + k(" btn-%s", this.options.buttonsClass) + k(" btn-%s", this.options.iconSize) + '" type="button" name="refresh" title="%s">', this.options.formatRefresh()), k('<i class="%s %s"></i>', this.options.iconsPrefix, this.options.icons.refresh), "</button>")
        }
        if (this.options.showToggle) {
            v.push(k('<button class="btn' + k(" btn-%s", this.options.buttonsClass) + k(" btn-%s", this.options.iconSize) + '" type="button" name="toggle" title="%s">', this.options.formatToggle()), k('<i class="%s %s"></i>', this.options.iconsPrefix, this.options.icons.toggle), "</button>")
        }
        if (this.options.showColumns) {
            v.push(k('<div class="keep-open btn-group" title="%s">', this.options.formatColumns()), '<button type="button" class="btn' + k(" btn-%s", this.options.buttonsClass) + k(" btn-%s", this.options.iconSize) + ' dropdown-toggle" data-toggle="dropdown">', k('<i class="%s %s"></i>', this.options.iconsPrefix, this.options.icons.columns), ' <span class="caret"></span>', "</button>", '<ul class="dropdown-menu" role="menu">');
            g.each(this.columns, function (z, x) {
                if (x.radio || x.checkbox) {
                    return
                }
                if (w.options.cardView && !x.cardVisible) {
                    return
                }
                var y = x.visible ? ' checked="checked"' : "";
                if (x.switchable) {
                    v.push(k("<li>" + '<label><input type="checkbox" data-field="%s" value="%s"%s> %s</label>' + "</li>", x.field, z, y, x.title));
                    t++
                }
            });
            v.push("</ul>", "</div>")
        }
        v.push("</div>");
        if (this.showToolbar || v.length > 2) {
            this.$toolbar.append(v.join(""))
        }
        if (this.options.showPaginationSwitch) {
            this.$toolbar.find('button[name="paginationSwitch"]').off("click").on("click", g.proxy(this.togglePagination, this))
        }
        if (this.options.showRefresh) {
            this.$toolbar.find('button[name="refresh"]').off("click").on("click", g.proxy(this.refresh, this))
        }
        if (this.options.showToggle) {
            this.$toolbar.find('button[name="toggle"]').off("click").on("click", function () {
                w.toggleView()
            })
        }
        if (this.options.showSearch) {
            this.$toolbar.find('button[name="showSearch"]').off("click").on("click", function () {
                g(".search-collapse").slideToggle()
            })
        }
        if (this.options.showColumns) {
            u = this.$toolbar.find(".keep-open");
            if (t <= this.options.minimumCountColumns) {
                u.find("input").prop("disabled", true)
            }
            u.find("li").off("click").on("click", function (x) {
                x.stopImmediatePropagation()
            });
            u.find("input").off("click").on("click", function () {
                var x = g(this);
                w.toggleColumn(g(this).val(), x.prop("checked"), false);
                w.trigger("column-switch", g(this).data("field"), x.prop("checked"))
            })
        }
        if (this.options.search) {
            v = [];
            v.push('<div class="pull-' + this.options.searchAlign + ' search">', k('<input class="form-control' + k(" input-%s", this.options.iconSize) + '" type="text" placeholder="%s">', this.options.formatSearch()), "</div>");
            this.$toolbar.append(v.join(""));
            r = this.$toolbar.find(".search input");
            r.off("keyup drop").on("keyup drop", function (x) {
                if (w.options.searchOnEnterKey && x.keyCode !== 13) {
                    return
                }
                if (g.inArray(x.keyCode, [37, 38, 39, 40]) > -1) {
                    return
                }
                clearTimeout(s);
                s = setTimeout(function () {
                    w.onSearch(x)
                }, w.options.searchTimeOut)
            });
            if (m()) {
                r.off("mouseup").on("mouseup", function (x) {
                    clearTimeout(s);
                    s = setTimeout(function () {
                        w.onSearch(x)
                    }, w.options.searchTimeOut)
                })
            }
        }
    };
    a.prototype.onSearch = function (r) {
        var s = g.trim(g(r.currentTarget).val());
        if (this.options.trimOnSearch && g(r.currentTarget).val() !== s) {
            g(r.currentTarget).val(s)
        }
        if (s === this.searchText) {
            return
        }
        this.searchText = s;
        this.options.searchText = s;
        this.options.pageNumber = 1;
        this.initSearch();
        this.updatePagination();
        this.trigger("search", s)
    };
    a.prototype.initSearch = function () {
        var r = this;
        if (this.options.sidePagination !== "server") {
            if (this.options.customSearch !== g.noop) {
                this.options.customSearch.apply(this, [this.searchText]);
                return
            }
            var t = this.searchText && (this.options.escape ? q(this.searchText) : this.searchText).toLowerCase();
            var s = g.isEmptyObject(this.filterColumns) ? null : this.filterColumns;
            this.data = s ? g.grep(this.options.data, function (w, v) {
                for (var u in s) {
                    if (g.isArray(s[u]) && g.inArray(w[u], s[u]) === -1 || w[u] !== s[u]) {
                        return false
                    }
                }
                return true
            }) : this.options.data;
            this.data = t ? g.grep(this.data, function (A, B) {
                for (var y = 0; y < r.header.fields.length; y++) {
                    if (!r.header.searchables[y]) {
                        continue
                    }
                    var z = g.isNumeric(r.header.fields[y]) ? parseInt(r.header.fields[y], 10) : r.header.fields[y];
                    var w = r.columns[f(r.columns, z)];
                    var u;
                    if (typeof z === "string") {
                        u = A;
                        var v = z.split(".");
                        for (var x = 0; x < v.length; x++) {
                            u = u[v[x]]
                        }
                        if (w && w.searchFormatter) {
                            u = b(w, r.header.formatters[y], [u, A, B], u)
                        }
                    } else {
                        u = A[z]
                    }
                    if (typeof u === "string" || typeof u === "number") {
                        if (r.options.strictSearch) {
                            if ((u + "").toLowerCase() === t) {
                                return true
                            }
                        } else {
                            if ((u + "").toLowerCase().indexOf(t) !== -1) {
                                return true
                            }
                        }
                    }
                }
                return false
            }) : this.data
        }
    };
    a.prototype.initPagination = function () {
        if (!this.options.pagination) {
            this.$pagination.hide();
            return
        } else {
            this.$pagination.show()
        }
        var A = this, z = [], D = false, x, G, r, y, v, w, s, E, t, u = this.getData(), H = this.options.pageList;
        if (this.options.sidePagination !== "server") {
            this.options.totalRows = u.length
        }
        this.totalPages = 0;
        if (this.options.totalRows) {
            if (this.options.pageSize === this.options.formatAllRows()) {
                this.options.pageSize = this.options.totalRows;
                D = true
            } else {
                if (this.options.pageSize === this.options.totalRows) {
                    var C = typeof this.options.pageList === "string" ? this.options.pageList.replace("[", "").replace("]", "").replace(/ /g, "").toLowerCase().split(",") : this.options.pageList;
                    if (g.inArray(this.options.formatAllRows().toLowerCase(), C) > -1) {
                        D = true
                    }
                }
            }
            this.totalPages = ~~((this.options.totalRows - 1) / this.options.pageSize) + 1;
            this.options.totalPages = this.totalPages
        }
        if (this.totalPages > 0 && this.options.pageNumber > this.totalPages) {
            this.options.pageNumber = this.totalPages
        }
        this.pageFrom = (this.options.pageNumber - 1) * this.options.pageSize + 1;
        this.pageTo = this.options.pageNumber * this.options.pageSize;
        if (this.pageTo > this.options.totalRows) {
            this.pageTo = this.options.totalRows
        }
        z.push('<div class="pull-' + this.options.paginationDetailHAlign + ' pagination-detail">', '<span class="pagination-info">', this.options.onlyInfoPagination ? this.options.formatDetailPagination(this.options.totalRows) : this.options.formatShowingRows(this.pageFrom, this.pageTo, this.options.totalRows), "</span>");
        if (!this.options.onlyInfoPagination) {
            z.push('<span class="page-list">');
            var F = [k('<span class="btn-group %s">', this.options.paginationVAlign === "top" || this.options.paginationVAlign === "both" ? "dropdown" : "dropup"), '<button type="button" class="btn' + k(" btn-%s", this.options.buttonsClass) + k(" btn-%s", this.options.iconSize) + ' dropdown-toggle" data-toggle="dropdown">', '<span class="page-size">', D ? this.options.formatAllRows() : this.options.pageSize, "</span>", ' <span class="caret"></span>', "</button>", '<ul class="dropdown-menu" role="menu">'];
            if (typeof this.options.pageList === "string") {
                var B = this.options.pageList.replace("[", "").replace("]", "").replace(/ /g, "").split(",");
                H = [];
                g.each(B, function (I, J) {
                    H.push(J.toUpperCase() === A.options.formatAllRows().toUpperCase() ? A.options.formatAllRows() : +J)
                })
            }
            g.each(H, function (J, K) {
                if (!A.options.smartDisplay || J === 0 || H[J - 1] <= A.options.totalRows) {
                    var I;
                    if (D) {
                        I = K === A.options.formatAllRows() ? ' class="active"' : ""
                    } else {
                        I = K === A.options.pageSize ? ' class="active"' : ""
                    }
                    F.push(k('<li%s><a href="javascript:void(0)">%s</a></li>', I, K))
                }
            });
            F.push("</ul></span>");
            z.push(this.options.formatRecordsPerPage(F.join("")));
            z.push("</span>");
            z.push("</div>", '<div class="pull-' + this.options.paginationHAlign + ' pagination">', '<ul class="pagination' + k(" pagination-%s", this.options.iconSize) + '">', '<li class="page-pre"><a href="javascript:void(0)">' + this.options.paginationPreText + "</a></li>");
            if (this.totalPages < 5) {
                G = 1;
                r = this.totalPages
            } else {
                G = this.options.pageNumber - 2;
                r = G + 4;
                if (G < 1) {
                    G = 1;
                    r = 5
                }
                if (r > this.totalPages) {
                    r = this.totalPages;
                    G = r - 4
                }
            }
            if (this.totalPages >= 6) {
                if (this.options.pageNumber >= 3) {
                    z.push('<li class="page-first' + (1 === this.options.pageNumber ? " active" : "") + '">', '<a href="javascript:void(0)">', 1, "</a>", "</li>");
                    G++
                }
                if (this.options.pageNumber >= 4) {
                    if (this.options.pageNumber == 4 || this.totalPages == 6 || this.totalPages == 7) {
                        G--
                    } else {
                        z.push('<li class="page-first-separator disabled">', '<a href="javascript:void(0)">...</a>', "</li>")
                    }
                    r--
                }
            }
            if (this.totalPages >= 7) {
                if (this.options.pageNumber >= (this.totalPages - 2)) {
                    G--
                }
            }
            if (this.totalPages == 6) {
                if (this.options.pageNumber >= (this.totalPages - 2)) {
                    r++
                }
            } else {
                if (this.totalPages >= 7) {
                    if (this.totalPages == 7 || this.options.pageNumber >= (this.totalPages - 3)) {
                        r++
                    }
                }
            }
            for (x = G; x <= r; x++) {
                z.push('<li class="page-number' + (x === this.options.pageNumber ? " active" : "") + '">', '<a href="javascript:void(0)">', x, "</a>", "</li>")
            }
            if (this.totalPages >= 8) {
                if (this.options.pageNumber <= (this.totalPages - 4)) {
                    z.push('<li class="page-last-separator disabled">', '<a href="javascript:void(0)">...</a>', "</li>")
                }
            }
            if (this.totalPages >= 6) {
                if (this.options.pageNumber <= (this.totalPages - 3)) {
                    z.push('<li class="page-last' + (this.totalPages === this.options.pageNumber ? " active" : "") + '">', '<a href="javascript:void(0)">', this.totalPages, "</a>", "</li>")
                }
            }
            z.push('<li class="page-next"><a href="javascript:void(0)">' + this.options.paginationNextText + "</a></li>", "</ul>", "</div>")
        }
        this.$pagination.html(z.join(""));
        if (!this.options.onlyInfoPagination) {
            y = this.$pagination.find(".page-list a");
            v = this.$pagination.find(".page-first");
            w = this.$pagination.find(".page-pre");
            s = this.$pagination.find(".page-next");
            E = this.$pagination.find(".page-last");
            t = this.$pagination.find(".page-number");
            if (this.options.smartDisplay) {
                if (this.totalPages <= 1) {
                    this.$pagination.find("div.pagination").hide()
                }
                if (H.length < 2 || this.options.totalRows <= H[0]) {
                    this.$pagination.find("span.page-list").hide()
                }
                this.$pagination[this.getData().length ? "show" : "hide"]()
            }
            if (D) {
                this.options.pageSize = this.options.formatAllRows()
            }
            y.off("click").on("click", g.proxy(this.onPageListChange, this));
            v.off("click").on("click", g.proxy(this.onPageFirst, this));
            w.off("click").on("click", g.proxy(this.onPagePre, this));
            s.off("click").on("click", g.proxy(this.onPageNext, this));
            E.off("click").on("click", g.proxy(this.onPageLast, this));
            t.off("click").on("click", g.proxy(this.onPageNumber, this))
        }
    };
    a.prototype.updatePagination = function (r) {
        if (r && g(r.currentTarget).hasClass("disabled")) {
            return
        }
        if (!this.options.maintainSelected) {
            this.resetRows()
        }
        this.initPagination();
        if (this.options.sidePagination === "server") {
            this.initServer()
        } else {
            this.initBody()
        }
        this.trigger("page-change", this.options.pageNumber, this.options.pageSize)
    };
    a.prototype.onPageListChange = function (r) {
        var s = g(r.currentTarget);
        s.parent().addClass("active").siblings().removeClass("active");
        this.options.pageSize = s.text().toUpperCase() === this.options.formatAllRows().toUpperCase() ? this.options.formatAllRows() : +s.text();
        this.$toolbar.find(".page-size").text(this.options.pageSize);
        this.updatePagination(r)
    };
    a.prototype.onPageFirst = function (r) {
        this.options.pageNumber = 1;
        this.updatePagination(r)
    };
    a.prototype.onPagePre = function (r) {
        if ((this.options.pageNumber - 1) === 0) {
            this.options.pageNumber = this.options.totalPages
        } else {
            this.options.pageNumber--
        }
        this.updatePagination(r)
    };
    a.prototype.onPageNext = function (r) {
        if ((this.options.pageNumber + 1) > this.options.totalPages) {
            this.options.pageNumber = 1
        } else {
            this.options.pageNumber++
        }
        this.updatePagination(r)
    };
    a.prototype.onPageLast = function (r) {
        this.options.pageNumber = this.totalPages;
        this.updatePagination(r)
    };
    a.prototype.onPageNumber = function (r) {
        if (this.options.pageNumber === +g(r.currentTarget).text()) {
            return
        }
        this.options.pageNumber = +g(r.currentTarget).text();
        this.updatePagination(r)
    };
    a.prototype.initBody = function (w) {
        var y = this, x = [], u = this.getData();
        this.trigger("pre-body", u);
        this.$body = this.$el.find(">tbody");
        if (!this.$body.length) {
            this.$body = g("<tbody></tbody>").appendTo(this.$el)
        }
        if (!this.options.pagination || this.options.sidePagination === "server") {
            this.pageFrom = 1;
            this.pageTo = u.length
        }
        for (var v = this.pageFrom - 1; v < this.pageTo; v++) {
            var A, B = u[v], C = {}, r = [], s = "", t = {}, z = [];
            C = b(this.options, this.options.rowStyle, [B, v], C);
            if (C && C.css) {
                for (A in C.css) {
                    r.push(A + ": " + C.css[A])
                }
            }
            t = b(this.options, this.options.rowAttributes, [B, v], t);
            if (t) {
                for (A in t) {
                    z.push(k('%s="%s"', A, q(t[A])))
                }
            }
            if (B._data && !g.isEmptyObject(B._data)) {
                g.each(B._data, function (D, E) {
                    if (D === "index") {
                        return
                    }
                    s += k(' data-%s="%s"', D, E)
                })
            }
            x.push("<tr", k(" %s", z.join(" ")), k(' id="%s"', g.isArray(B) ? undefined : B._id), k(' class="%s"', C.classes || (g.isArray(B) ? undefined : B._class)), k(' data-index="%s"', v), k(' data-uniqueid="%s"', B[this.options.uniqueId]), k("%s", s), ">");
            if (this.options.cardView) {
                x.push(k('<td colspan="%s"><div class="card-views">', this.header.fields.length))
            }
            if (!this.options.cardView && this.options.detailView) {
                x.push("<td>", '<a class="detail-icon" href="javascript:">', k('<i class="%s %s"></i>', this.options.iconsPrefix, this.options.icons.detailOpen), "</a>", "</td>")
            }
            g.each(this.header.fields, function (I, O) {
                var H = "", P = n(B, O, y.options.escape), N = "", R = {}, J = "", L = y.header.classes[I], F = "",
                    E = "", K = "", G = "", D = y.columns[I];
                if (y.fromHtml && typeof P === "undefined") {
                    return
                }
                if (!D.visible) {
                    return
                }
                if (y.options.cardView && !D.cardVisible) {
                    return
                }
                C = k('style="%s"', r.concat(y.header.styles[I]).join("; "));
                if (B["_" + O + "_id"]) {
                    J = k(' id="%s"', B["_" + O + "_id"])
                }
                if (B["_" + O + "_class"]) {
                    L = k(' class="%s"', B["_" + O + "_class"])
                }
                if (B["_" + O + "_rowspan"]) {
                    E = k(' rowspan="%s"', B["_" + O + "_rowspan"])
                }
                if (B["_" + O + "_colspan"]) {
                    K = k(' colspan="%s"', B["_" + O + "_colspan"])
                }
                if (B["_" + O + "_title"]) {
                    G = k(' title="%s"', B["_" + O + "_title"])
                }
                R = b(y.header, y.header.cellStyles[I], [P, B, v, O], R);
                if (R.classes) {
                    L = k(' class="%s"', R.classes)
                }
                if (R.css) {
                    var M = [];
                    for (var Q in R.css) {
                        M.push(Q + ": " + R.css[Q])
                    }
                    C = k('style="%s"', M.concat(y.header.styles[I]).join("; "))
                }
                P = b(D, y.header.formatters[I], [P, B, v], P);
                if (B["_" + O + "_data"] && !g.isEmptyObject(B["_" + O + "_data"])) {
                    g.each(B["_" + O + "_data"], function (T, S) {
                        if (T === "index") {
                            return
                        }
                        F += k(' data-%s="%s"', T, S)
                    })
                }
                if (D.checkbox || D.radio) {
                    N = D.checkbox ? "checkbox" : N;
                    N = D.radio ? "radio" : N;
                    H = [k(y.options.cardView ? '<div class="card-view %s">' : '<td class="bs-checkbox %s">', D["class"] || ""), "<input" + k(' data-index="%s"', v) + k(' name="%s"', y.options.selectItemName) + k(' type="%s"', N) + k(' value="%s"', B[y.options.idField]) + k(' checked="%s"', P === true || (P && P.checked) ? "checked" : undefined) + k(' disabled="%s"', !D.checkboxEnabled || (P && P.disabled) ? "disabled" : undefined) + " />", y.header.formatters[I] && typeof P === "string" ? P : "", y.options.cardView ? "</div>" : "</td>"].join("");
                    B[y.header.stateField] = P === true || (P && P.checked)
                } else {
                    P = typeof P === "undefined" || P === null ? y.options.undefinedText : P;
                    H = y.options.cardView ? ['<div class="card-view">', y.options.showHeader ? k('<span class="title" %s>%s</span>', C, o(y.columns, "field", "title", O)) : "", k('<span class="value">%s</span>', P), "</div>"].join("") : [k("<td%s %s %s %s %s %s %s>", J, L, C, F, E, K, G), P, "</td>"].join("");
                    if (y.options.cardView && y.options.smartDisplay && P === "") {
                        H = '<div class="card-view"></div>'
                    }
                }
                x.push(H)
            });
            if (this.options.cardView) {
                x.push("</div></td>")
            }
            x.push("</tr>")
        }
        if (!x.length) {
            x.push('<tr class="no-records-found">', k('<td colspan="%s">%s</td>', this.$header.find("th").length, this.options.formatNoMatches()), "</tr>")
        }
        this.$body.html(x.join(""));
        if (!w) {
            this.scrollTo(0)
        }
        this.$body.find("> tr[data-index] > td").off("click dblclick").on("click dblclick", function (D) {
            var H = g(this), J = H.parent(), G = y.data[J.data("index")], L = H[0].cellIndex, K = y.getVisibleFields(),
                E = K[y.options.detailView && !y.options.cardView ? L - 1 : L], I = y.columns[f(y.columns, E)],
                F = n(G, E, y.options.escape);
            if (H.find(".detail-icon").length) {
                return
            }
            y.trigger(D.type === "click" ? "click-cell" : "dbl-click-cell", E, F, G, H);
            y.trigger(D.type === "click" ? "click-row" : "dbl-click-row", G, J, E);
            if (D.type === "click" && y.options.clickToSelect && I.clickToSelect) {
                var M = J.find(k('[name="%s"]', y.options.selectItemName));
                if (M.length) {
                    M[0].click()
                }
            }
        });
        this.$body.find("> tr[data-index] > td > .detail-icon").off("click").on("click", function () {
            var I = g(this), H = I.parent().parent(), F = H.data("index"), D = u[F];
            if (H.next().is("tr.detail-view")) {
                I.find("i").attr("class", k("%s %s", y.options.iconsPrefix, y.options.icons.detailOpen));
                H.next().remove();
                y.trigger("collapse-row", F, D)
            } else {
                I.find("i").attr("class", k("%s %s", y.options.iconsPrefix, y.options.icons.detailClose));
                H.after(k('<tr class="detail-view"><td colspan="%s"></td></tr>', H.find("td").length));
                var E = H.next().find("td");
                var G = b(y.options, y.options.detailFormatter, [F, D, E], "");
                if (E.length === 1) {
                    E.append(G)
                }
                y.trigger("expand-row", F, D, E)
            }
            y.resetView()
        });
        this.$selectItem = this.$body.find(k('[name="%s"]', this.options.selectItemName));
        this.$selectItem.off("click").on("click", function (F) {
            F.stopImmediatePropagation();
            var G = g(this), E = G.prop("checked"), D = y.data[G.data("index")];
            if (y.options.maintainSelected && g(this).is(":radio")) {
                g.each(y.options.data, function (H, I) {
                    I[y.header.stateField] = false
                })
            }
            D[y.header.stateField] = E;
            if (y.options.singleSelect) {
                y.$selectItem.not(this).each(function () {
                    y.data[g(this).data("index")][y.header.stateField] = false
                });
                y.$selectItem.filter(":checked").not(this).prop("checked", false)
            }
            y.updateSelected();
            y.trigger(E ? "check" : "uncheck", D, G)
        });
        g.each(this.header.events, function (H, G) {
            if (!G) {
                return
            }
            if (typeof G === "string") {
                G = b(null, G)
            }
            var D = y.header.fields[H], E = g.inArray(D, y.getVisibleFields());
            if (y.options.detailView && !y.options.cardView) {
                E += 1
            }
            for (var F in G) {
                y.$body.find(">tr:not(.no-records-found)").each(function () {
                    var I = g(this), J = I.find(y.options.cardView ? ".card-view" : "td").eq(E), L = F.indexOf(" "),
                        K = F.substring(0, L), M = F.substring(L + 1), N = G[F];
                    J.find(M).off(K).on(K, function (Q) {
                        var O = I.data("index"), R = y.data[O], P = R[D];
                        N.apply(this, [Q, P, R, O])
                    })
                })
            }
        });
        this.updateSelected();
        this.resetView();
        this.trigger("post-body", u)
    };
    a.prototype.initServer = function (t, r, u) {
        var w = this, x = {},
            s = {searchText: this.searchText, sortName: this.options.sortName, sortOrder: this.options.sortOrder}, v;
        if (this.options.pagination) {
            s.pageSize = this.options.pageSize === this.options.formatAllRows() ? this.options.totalRows : this.options.pageSize;
            s.pageNumber = this.options.pageNumber
        }
        if (!(u || this.options.url) && !this.options.ajax) {
            return
        }
        if (this.options.queryParamsType === "limit") {
            s = {search: s.searchText, sort: s.sortName, order: s.sortOrder};
            if (this.options.pagination) {
                s.offset = this.options.pageSize === this.options.formatAllRows() ? 0 : this.options.pageSize * (this.options.pageNumber - 1);
                s.limit = this.options.pageSize === this.options.formatAllRows() ? this.options.totalRows : this.options.pageSize
            }
        }
        if (!(g.isEmptyObject(this.filterColumnsPartial))) {
            s.filter = JSON.stringify(this.filterColumnsPartial, null)
        }
        x = b(this.options, this.options.queryParams, [s], x);
        g.extend(x, r || {});
        if (x === false) {
            return
        }
        if (!t) {
            this.$tableLoading.show()
        }
        v = g.extend({}, b(null, this.options.ajaxOptions), {
            type: this.options.method,
            url: u || this.options.url,
            data: this.options.contentType === "application/json" && this.options.method === "post" ? JSON.stringify(x) : x,
            cache: this.options.cache,
            contentType: this.options.contentType,
            dataType: this.options.dataType,
            success: function (y) {
                y = b(w.options, w.options.responseHandler, [y], y);
                w.load(y);
                w.trigger("load-success", y);
                if (!t) {
                    w.$tableLoading.hide()
                }
            },
            error: function (y) {
                w.trigger("load-error", y.status, y);
                if (!t) {
                    w.$tableLoading.hide()
                }
            }
        });
        if (this.options.ajax) {
            b(this, this.options.ajax, [v], null)
        } else {
            if (this._xhr && this._xhr.readyState !== 4) {
                this._xhr.abort()
            }
            this._xhr = g.ajax(v)
        }
    };
    a.prototype.initSearchText = function () {
        if (this.options.search) {
            if (this.options.searchText !== "") {
                var r = this.$toolbar.find(".search input");
                r.val(this.options.searchText);
                this.onSearch({currentTarget: r})
            }
        }
    };
    a.prototype.getCaret = function () {
        var r = this;
        g.each(this.$header.find("th"), function (t, s) {
            g(s).find(".sortable").removeClass("desc asc").addClass(g(s).data("field") === r.options.sortName ? r.options.sortOrder : "both")
        })
    };
    a.prototype.updateSelected = function () {
        var r = this.$selectItem.filter(":enabled").length && this.$selectItem.filter(":enabled").length === this.$selectItem.filter(":enabled").filter(":checked").length;
        this.$selectAll.add(this.$selectAll_).prop("checked", r);
        this.$selectItem.each(function () {
            g(this).closest("tr")[g(this).prop("checked") ? "addClass" : "removeClass"]("selected")
        })
    };
    a.prototype.updateRows = function () {
        var r = this;
        this.$selectItem.each(function () {
            r.data[g(this).data("index")][r.header.stateField] = g(this).prop("checked")
        })
    };
    a.prototype.resetRows = function () {
        var r = this;
        g.each(this.data, function (t, s) {
            r.$selectAll.prop("checked", false);
            r.$selectItem.prop("checked", false);
            if (r.header.stateField) {
                s[r.header.stateField] = false
            }
        })
    };
    a.prototype.trigger = function (s) {
        var r = Array.prototype.slice.call(arguments, 1);
        s += ".bs.table";
        this.options[a.EVENTS[s]].apply(this.options, r);
        this.$el.trigger(g.Event(s), r);
        this.options.onAll(s, r);
        this.$el.trigger(g.Event("all.bs.table"), [s, r])
    };
    a.prototype.resetHeader = function () {
        clearTimeout(this.timeoutId_);
        this.timeoutId_ = setTimeout(g.proxy(this.fitHeader, this), this.$el.is(":hidden") ? 100 : 0)
    };
    a.prototype.fitHeader = function () {
        var s = this, t, A, w, x;
        if (s.$el.is(":hidden")) {
            s.timeoutId_ = setTimeout(g.proxy(s.fitHeader, s), 100);
            return
        }
        t = this.$tableBody.get(0);
        A = t.scrollWidth > t.clientWidth && t.scrollHeight > t.clientHeight + this.$header.outerHeight() ? j() : 0;
        this.$el.css("margin-top", -this.$header.outerHeight());
        w = g(":focus");
        if (w.length > 0) {
            var y = w.parents("th");
            if (y.length > 0) {
                var z = y.attr("data-field");
                if (z !== undefined) {
                    var r = this.$header.find("[data-field='" + z + "']");
                    if (r.length > 0) {
                        r.find(":input").addClass("focus-temp")
                    }
                }
            }
        }
        this.$header_ = this.$header.clone(true, true);
        this.$selectAll_ = this.$header_.find('[name="btSelectAll"]');
        this.$tableHeader.css({"margin-right": A}).find("table").css("width", this.$el.outerWidth()).html("").attr("class", this.$el.attr("class")).append(this.$header_);
        x = g(".focus-temp:visible:eq(0)");
        if (x.length > 0) {
            x.focus();
            this.$header.find(".focus-temp").removeClass("focus-temp")
        }
        this.$header.find("th[data-field]").each(function (B) {
            s.$header_.find(k('th[data-field="%s"]', g(this).data("field"))).data(g(this).data())
        });
        var v = this.getVisibleFields(), u = this.$header_.find("th");
        this.$body.find(">tr:first-child:not(.no-records-found) > *").each(function (B) {
            var D = g(this), E = B;
            if (s.options.detailView && !s.options.cardView) {
                if (B === 0) {
                    s.$header_.find("th.detail").find(".fht-cell").width(D.innerWidth())
                }
                E = B - 1
            }
            var C = s.$header_.find(k('th[data-field="%s"]', v[E]));
            if (C.length > 1) {
                C = g(u[D[0].cellIndex])
            }
            C.find(".fht-cell").width(D.innerWidth())
        });
        this.$tableBody.off("scroll").on("scroll", function () {
            s.$tableHeader.scrollLeft(g(this).scrollLeft());
            if (s.options.showFooter && !s.options.cardView) {
                s.$tableFooter.scrollLeft(g(this).scrollLeft())
            }
        });
        s.trigger("post-header")
    };
    a.prototype.resetFooter = function () {
        var r = this, s = r.getData(), t = [];
        if (!this.options.showFooter || this.options.cardView) {
            return
        }
        if (!this.options.cardView && this.options.detailView) {
            t.push('<td><div class="th-inner">&nbsp;</div><div class="fht-cell"></div></td>')
        }
        g.each(this.columns, function (A, w) {
            var z, u = "", y = "", B = [], v = {}, x = k(' class="%s"', w["class"]);
            if (!w.visible) {
                return
            }
            if (r.options.cardView && (!w.cardVisible)) {
                return
            }
            u = k("text-align: %s; ", w.falign ? w.falign : w.align);
            y = k("vertical-align: %s; ", w.valign);
            v = b(null, r.options.footerStyle);
            if (v && v.css) {
                for (z in v.css) {
                    B.push(z + ": " + v.css[z])
                }
            }
            t.push("<td", x, k(' style="%s"', u + y + B.concat().join("; ")), ">");
            t.push('<div class="th-inner">');
            t.push(b(w, w.footerFormatter, [s], "&nbsp;") || "&nbsp;");
            t.push("</div>");
            t.push('<div class="fht-cell"></div>');
            t.push("</div>");
            t.push("</td>")
        });
        this.$tableFooter.find("tr").html(t.join(""));
        this.$tableFooter.show();
        clearTimeout(this.timeoutFooter_);
        this.timeoutFooter_ = setTimeout(g.proxy(this.fitFooter, this), this.$el.is(":hidden") ? 100 : 0)
    };
    a.prototype.fitFooter = function () {
        var s = this, t, r, u;
        clearTimeout(this.timeoutFooter_);
        if (this.$el.is(":hidden")) {
            this.timeoutFooter_ = setTimeout(g.proxy(this.fitFooter, this), 100);
            return
        }
        r = this.$el.css("width");
        u = r > this.$tableBody.width() ? j() : 0;
        this.$tableFooter.css({"margin-right": u}).find("table").css("width", r).attr("class", this.$el.attr("class"));
        t = this.$tableFooter.find("td");
        this.$body.find(">tr:first-child:not(.no-records-found) > *").each(function (v) {
            var w = g(this);
            t.eq(v).find(".fht-cell").width(w.innerWidth())
        })
    };
    a.prototype.toggleColumn = function (t, u, s) {
        if (t === -1) {
            return
        }
        this.columns[t].visible = u;
        this.initHeader();
        this.initSearch();
        this.initPagination();
        this.initBody();
        if (this.options.showColumns) {
            var r = this.$toolbar.find(".keep-open input").prop("disabled", false);
            if (s) {
                r.filter(k('[value="%s"]', t)).prop("checked", u)
            }
            if (r.filter(":checked").length <= this.options.minimumCountColumns) {
                r.filter(":checked").prop("disabled", true)
            }
        }
    };
    a.prototype.toggleRow = function (t, s, r) {
        if (t === -1) {
            return
        }
        this.$body.find(typeof t !== "undefined" ? k('tr[data-index="%s"]', t) : k('tr[data-uniqueid="%s"]', s))[r ? "show" : "hide"]()
    };
    a.prototype.getVisibleFields = function () {
        var s = this, r = [];
        g.each(this.header.fields, function (t, v) {
            var u = s.columns[f(s.columns, v)];
            if (!u.visible) {
                return
            }
            r.push(v)
        });
        return r
    };
    a.prototype.resetView = function (r) {
        var u = 0;
        if (r && r.height) {
            this.options.height = r.height
        }
        this.$selectAll.prop("checked", this.$selectItem.length > 0 && this.$selectItem.length === this.$selectItem.filter(":checked").length);
        if (this.options.height) {
            var v = p(this.$toolbar), s = p(this.$pagination), t = this.options.height - v - s;
            this.$tableContainer.css("height", t + "px")
        }
        if (this.options.cardView) {
            this.$el.css("margin-top", "0");
            this.$tableContainer.css("padding-bottom", "0");
            this.$tableFooter.hide();
            return
        }
        if (this.options.showHeader && this.options.height) {
            this.$tableHeader.show();
            this.resetHeader();
            u += this.$header.outerHeight()
        } else {
            this.$tableHeader.hide();
            this.trigger("post-header")
        }
        if (this.options.showFooter) {
            this.resetFooter();
            if (this.options.height) {
                u += this.$tableFooter.outerHeight() + 1
            }
        }
        this.getCaret();
        this.$tableContainer.css("padding-bottom", u + "px");
        this.trigger("reset-view")
    };
    a.prototype.getData = function (r) {
        return (this.searchText || !g.isEmptyObject(this.filterColumns) || !g.isEmptyObject(this.filterColumnsPartial)) ? (r ? this.data.slice(this.pageFrom - 1, this.pageTo) : this.data) : (r ? this.options.data.slice(this.pageFrom - 1, this.pageTo) : this.options.data)
    };
    a.prototype.load = function (s) {
        var r = false;
        if (this.options.sidePagination === "server") {
            this.options.totalRows = s.total;
            r = s.fixedScroll;
            s = s[this.options.dataField]
        } else {
            if (!g.isArray(s)) {
                r = s.fixedScroll;
                s = s.data
            }
        }
        this.initData(s);
        this.initSearch();
        this.initPagination();
        this.initBody(r)
    };
    a.prototype.append = function (r) {
        this.initData(r, "append");
        this.initSearch();
        this.initPagination();
        this.initSort();
        this.initBody(true)
    };
    a.prototype.prepend = function (r) {
        this.initData(r, "prepend");
        this.initSearch();
        this.initPagination();
        this.initSort();
        this.initBody(true)
    };
    a.prototype.remove = function (s) {
        var t = this.options.data.length, u, r;
        if (!s.hasOwnProperty("field") || !s.hasOwnProperty("values")) {
            return
        }
        for (u = t - 1; u >= 0; u--) {
            r = this.options.data[u];
            if (!r.hasOwnProperty(s.field)) {
                continue
            }
            if (g.inArray(r[s.field], s.values) !== -1) {
                this.options.data.splice(u, 1)
            }
        }
        if (t === this.options.data.length) {
            return
        }
        this.initSearch();
        this.initPagination();
        this.initSort();
        this.initBody(true)
    };
    a.prototype.removeAll = function () {
        if (this.options.data.length > 0) {
            this.options.data.splice(0, this.options.data.length);
            this.initSearch();
            this.initPagination();
            this.initBody(true)
        }
    };
    a.prototype.getRowByUniqueId = function (s) {
        var r = this.options.uniqueId, t = this.options.data.length, u = null, v, x, w;
        for (v = t - 1; v >= 0; v--) {
            x = this.options.data[v];
            if (x.hasOwnProperty(r)) {
                w = x[r]
            } else {
                if (x._data.hasOwnProperty(r)) {
                    w = x._data[r]
                } else {
                    continue
                }
            }
            if (typeof w === "string") {
                s = s.toString()
            } else {
                if (typeof w === "number") {
                    if ((Number(w) === w) && (w % 1 === 0)) {
                        s = parseInt(s)
                    } else {
                        if ((w === Number(w)) && (w !== 0)) {
                            s = parseFloat(s)
                        }
                    }
                }
            }
            if (w === s) {
                u = x;
                break
            }
        }
        return u
    };
    a.prototype.removeByUniqueId = function (s) {
        var t = this.options.data.length, r = this.getRowByUniqueId(s);
        if (r) {
            this.options.data.splice(this.options.data.indexOf(r), 1)
        }
        if (t === this.options.data.length) {
            return
        }
        this.initSearch();
        this.initPagination();
        this.initBody(true)
    };
    a.prototype.updateByUniqueId = function (s) {
        var t = this;
        var r = g.isArray(s) ? s : [s];
        g.each(r, function (u, w) {
            var v;
            if (!w.hasOwnProperty("id") || !w.hasOwnProperty("row")) {
                return
            }
            v = g.inArray(t.getRowByUniqueId(w.id), t.options.data);
            if (v === -1) {
                return
            }
            g.extend(t.options.data[v], w.row)
        });
        this.initSearch();
        this.initSort();
        this.initBody(true)
    };
    a.prototype.insertRow = function (r) {
        if (!r.hasOwnProperty("index") || !r.hasOwnProperty("row")) {
            return
        }
        this.data.splice(r.index, 0, r.row);
        this.initSearch();
        this.initPagination();
        this.initSort();
        this.initBody(true)
    };
    a.prototype.updateRow = function (s) {
        var t = this;
        var r = g.isArray(s) ? s : [s];
        g.each(r, function (u, v) {
            if (!v.hasOwnProperty("index") || !v.hasOwnProperty("row")) {
                return
            }
            g.extend(t.options.data[v.index], v.row)
        });
        this.initSearch();
        this.initSort();
        this.initBody(true)
    };
    a.prototype.showRow = function (r) {
        if (!r.hasOwnProperty("index") && !r.hasOwnProperty("uniqueId")) {
            return
        }
        this.toggleRow(r.index, r.uniqueId, true)
    };
    a.prototype.hideRow = function (r) {
        if (!r.hasOwnProperty("index") && !r.hasOwnProperty("uniqueId")) {
            return
        }
        this.toggleRow(r.index, r.uniqueId, false)
    };
    a.prototype.getRowsHidden = function (t) {
        var s = g(this.$body[0]).children().filter(":hidden"), r = 0;
        if (t) {
            for (; r < s.length; r++) {
                g(s[r]).show()
            }
        }
        return s
    };
    a.prototype.mergeCells = function (y) {
        var x = y.index, s = g.inArray(y.field, this.getVisibleFields()), t = y.rowspan || 1, r = y.colspan || 1, v, u,
            w = this.$body.find(">tr"), z;
        if (this.options.detailView && !this.options.cardView) {
            s += 1
        }
        z = w.eq(x).find(">td").eq(s);
        if (x < 0 || s < 0 || x >= this.data.length) {
            return
        }
        for (v = x; v < x + t; v++) {
            for (u = s; u < s + r; u++) {
                w.eq(v).find(">td").eq(u).hide()
            }
        }
        z.attr("rowspan", t).attr("colspan", r).show()
    };
    a.prototype.updateCell = function (r) {
        if (!r.hasOwnProperty("index") || !r.hasOwnProperty("field") || !r.hasOwnProperty("value")) {
            return
        }
        this.data[r.index][r.field] = r.value;
        if (r.reinit === false) {
            return
        }
        this.initSort();
        this.initBody(true)
    };
    a.prototype.getOptions = function () {
        return this.options
    };
    a.prototype.getSelections = function () {
        var r = this;
        return g.grep(this.options.data, function (s) {
            return s[r.header.stateField]
        })
    };
    a.prototype.getAllSelections = function () {
        var r = this;
        return g.grep(this.options.data, function (s) {
            return s[r.header.stateField]
        })
    };
    a.prototype.checkAll = function () {
        this.checkAll_(true)
    };
    a.prototype.uncheckAll = function () {
        this.checkAll_(false)
    };
    a.prototype.checkInvert = function () {
        var r = this;
        var s = r.$selectItem.filter(":enabled");
        var t = s.filter(":checked");
        s.each(function () {
            g(this).prop("checked", !g(this).prop("checked"))
        });
        r.updateRows();
        r.updateSelected();
        r.trigger("uncheck-some", t);
        t = r.getSelections();
        r.trigger("check-some", t)
    };
    a.prototype.checkAll_ = function (r) {
        var s;
        if (!r) {
            s = this.getSelections()
        }
        this.$selectAll.add(this.$selectAll_).prop("checked", r);
        this.$selectItem.filter(":enabled").prop("checked", r);
        this.updateRows();
        if (r) {
            s = this.getSelections()
        }
        this.trigger(r ? "check-all" : "uncheck-all", s)
    };
    a.prototype.check = function (r) {
        this.check_(true, r)
    };
    a.prototype.uncheck = function (r) {
        this.check_(false, r)
    };
    a.prototype.check_ = function (s, t) {
        var r = this.$selectItem.filter(k('[data-index="%s"]', t)).prop("checked", s);
        this.data[t][this.header.stateField] = s;
        this.updateSelected();
        this.trigger(s ? "check" : "uncheck", this.data[t], r)
    };
    a.prototype.checkBy = function (r) {
        this.checkBy_(true, r)
    };
    a.prototype.uncheckBy = function (r) {
        this.checkBy_(false, r)
    };
    a.prototype.checkBy_ = function (u, s) {
        if (!s.hasOwnProperty("field") || !s.hasOwnProperty("values")) {
            return
        }
        var t = this, r = [];
        g.each(this.options.data, function (v, x) {
            if (!x.hasOwnProperty(s.field)) {
                return false
            }
            if (g.inArray(x[s.field], s.values) !== -1) {
                var w = t.$selectItem.filter(":enabled").filter(k('[data-index="%s"]', v)).prop("checked", u);
                x[t.header.stateField] = u;
                r.push(x);
                t.trigger(u ? "check" : "uncheck", x, w)
            }
        });
        this.updateSelected();
        this.trigger(u ? "check-some" : "uncheck-some", r)
    };
    a.prototype.destroy = function () {
        this.$el.insertBefore(this.$container);
        g(this.options.toolbar).insertBefore(this.$el);
        this.$container.next().remove();
        this.$container.remove();
        this.$el.html(this.$el_.html()).css("margin-top", "0").attr("class", this.$el_.attr("class") || "")
    };
    a.prototype.showLoading = function () {
        this.$tableLoading.show()
    };
    a.prototype.hideLoading = function () {
        this.$tableLoading.hide()
    };
    a.prototype.togglePagination = function () {
        this.options.pagination = !this.options.pagination;
        var r = this.$toolbar.find('button[name="paginationSwitch"] i');
        if (this.options.pagination) {
            r.attr("class", this.options.iconsPrefix + " " + this.options.icons.paginationSwitchDown)
        } else {
            r.attr("class", this.options.iconsPrefix + " " + this.options.icons.paginationSwitchUp)
        }
        this.updatePagination()
    };
    a.prototype.refresh = function (r) {
        if (r && r.url) {
            this.options.pageNumber = 1
        }
        this.initServer(r && r.silent, r && r.query, r && r.url);
        this.trigger("refresh", r)
    };
    a.prototype.resetWidth = function () {
        if (this.options.showHeader && this.options.height) {
            this.fitHeader()
        }
        if (this.options.showFooter) {
            this.fitFooter()
        }
    };
    a.prototype.showColumn = function (r) {
        this.toggleColumn(f(this.columns, r), true, true)
    };
    a.prototype.hideColumn = function (r) {
        this.toggleColumn(f(this.columns, r), false, true)
    };
    a.prototype.getHiddenColumns = function () {
        return g.grep(this.columns, function (r) {
            return !r.visible
        })
    };
    a.prototype.getVisibleColumns = function () {
        return g.grep(this.columns, function (r) {
            return r.visible
        })
    };
    a.prototype.toggleAllColumns = function (r) {
        g.each(this.columns, function (t, u) {
            this.columns[t].visible = r
        });
        this.initHeader();
        this.initSearch();
        this.initPagination();
        this.initBody();
        if (this.options.showColumns) {
            var s = this.$toolbar.find(".keep-open input").prop("disabled", false);
            if (s.filter(":checked").length <= this.options.minimumCountColumns) {
                s.filter(":checked").prop("disabled", true)
            }
        }
    };
    a.prototype.showAllColumns = function () {
        this.toggleAllColumns(true)
    };
    a.prototype.hideAllColumns = function () {
        this.toggleAllColumns(false)
    };
    a.prototype.filterBy = function (r) {
        this.filterColumns = g.isEmptyObject(r) ? {} : r;
        this.options.pageNumber = 1;
        this.initSearch();
        this.updatePagination()
    };
    a.prototype.scrollTo = function (r) {
        if (typeof r === "string") {
            r = r === "bottom" ? this.$tableBody[0].scrollHeight : 0
        }
        if (typeof r === "number") {
            this.$tableBody.scrollTop(r)
        }
        if (typeof r === "undefined") {
            return this.$tableBody.scrollTop()
        }
    };
    a.prototype.getScrollPosition = function () {
        return this.scrollTo()
    };
    a.prototype.selectPage = function (r) {
        if (r > 0 && r <= this.options.totalPages) {
            this.options.pageNumber = r;
            this.updatePagination()
        }
    };
    a.prototype.prevPage = function () {
        if (this.options.pageNumber > 1) {
            this.options.pageNumber--;
            this.updatePagination()
        }
    };
    a.prototype.nextPage = function () {
        if (this.options.pageNumber < this.options.totalPages) {
            this.options.pageNumber++;
            this.updatePagination()
        }
    };
    a.prototype.toggleView = function () {
        this.options.cardView = !this.options.cardView;
        this.initHeader();
        this.initBody();
        this.trigger("toggle", this.options.cardView)
    };
    a.prototype.refreshOptions = function (r) {
        if (c(this.options, r, true)) {
            return
        }
        this.options = g.extend(this.options, r);
        this.trigger("refresh-options", this.options);
        this.destroy();
        this.init()
    };
    a.prototype.resetSearch = function (s) {
        var r = this.$toolbar.find(".search input");
        r.val(s || "");
        this.onSearch({currentTarget: r})
    };
    a.prototype.expandRow_ = function (r, t) {
        var s = this.$body.find(k('> tr[data-index="%s"]', t));
        if (s.next().is("tr.detail-view") === (r ? false : true)) {
            s.find("> td > .detail-icon").click()
        }
    };
    a.prototype.expandRow = function (r) {
        this.expandRow_(true, r)
    };
    a.prototype.collapseRow = function (r) {
        this.expandRow_(false, r)
    };
    a.prototype.expandAllRows = function (z) {
        if (z) {
            var v = this.$body.find(k('> tr[data-index="%s"]', 0)), w = this, t = null, u = false, r = -1;
            if (!v.next().is("tr.detail-view")) {
                v.find("> td > .detail-icon").click();
                u = true
            } else {
                if (!v.next().next().is("tr.detail-view")) {
                    v.next().find(".detail-icon").click();
                    u = true
                }
            }
            if (u) {
                try {
                    r = setInterval(function () {
                        t = w.$body.find("tr.detail-view").last().find(".detail-icon");
                        if (t.length > 0) {
                            t.click()
                        } else {
                            clearInterval(r)
                        }
                    }, 1)
                } catch (y) {
                    clearInterval(r)
                }
            }
        } else {
            var x = this.$body.children();
            for (var s = 0; s < x.length; s++) {
                this.expandRow_(true, g(x[s]).data("index"))
            }
        }
    };
    a.prototype.collapseAllRows = function (r) {
        if (r) {
            this.expandRow_(false, 0)
        } else {
            var t = this.$body.children();
            for (var s = 0; s < t.length; s++) {
                this.expandRow_(false, g(t[s]).data("index"))
            }
        }
    };
    a.prototype.updateFormatText = function (r, s) {
        if (this.options[k("format%s", r)]) {
            if (typeof s === "string") {
                this.options[k("format%s", r)] = function () {
                    return s
                }
            } else {
                if (typeof s === "function") {
                    this.options[k("format%s", r)] = s
                }
            }
        }
        this.initToolbar();
        this.initPagination();
        this.initBody()
    };
    var l = ["getOptions", "getSelections", "getAllSelections", "getData", "load", "append", "prepend", "remove", "removeAll", "insertRow", "updateRow", "updateCell", "updateByUniqueId", "removeByUniqueId", "getRowByUniqueId", "showRow", "hideRow", "getRowsHidden", "mergeCells", "checkAll", "uncheckAll", "checkInvert", "check", "uncheck", "checkBy", "uncheckBy", "refresh", "resetView", "resetWidth", "destroy", "showLoading", "hideLoading", "showColumn", "hideColumn", "getHiddenColumns", "getVisibleColumns", "showAllColumns", "hideAllColumns", "filterBy", "scrollTo", "getScrollPosition", "selectPage", "prevPage", "nextPage", "togglePagination", "toggleView", "refreshOptions", "resetSearch", "expandRow", "collapseRow", "expandAllRows", "collapseAllRows", "updateFormatText"];
    g.fn.bootstrapTable = function (r) {
        var s, t = Array.prototype.slice.call(arguments, 1);
        this.each(function () {
            var w = g(this), v = w.data("bootstrap.table"),
                u = g.extend({}, a.DEFAULTS, w.data(), typeof r === "object" && r);
            if (typeof r === "string") {
                if (g.inArray(r, l) < 0) {
                    throw new Error("Unknown method: " + r)
                }
                if (!v) {
                    return
                }
                s = v[r].apply(v, t);
                if (r === "destroy") {
                    w.removeData("bootstrap.table")
                }
            }
            if (!v) {
                w.data("bootstrap.table", (v = new a(this, u)))
            }
        });
        return typeof s === "undefined" ? this : s
    };
    g.fn.bootstrapTable.Constructor = a;
    g.fn.bootstrapTable.defaults = a.DEFAULTS;
    g.fn.bootstrapTable.columnDefaults = a.COLUMN_DEFAULTS;
    g.fn.bootstrapTable.locales = a.LOCALES;
    g.fn.bootstrapTable.methods = l;
    g.fn.bootstrapTable.utils = {
        sprintf: k,
        getFieldIndex: f,
        compareObjects: c,
        calculateObjectValue: b,
        getItemField: n,
        objectKeys: e,
        isIEBrowser: m
    };
    g(function () {
        g('[data-toggle="table"]').bootstrapTable()
    })
})(jQuery);